{
	"info": {
		"_postman_id": "e40b7d2c-c573-407d-957b-3acba3de2402",
		"name": "Assignment API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33062630"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Check status code is 201 (Created)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Ensure the response time is below 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"newuser123\",\r\n  \"email\": \"newuser@example.com\",\r\n  \"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{$endpoint}/users",
					"host": [
						"{$endpoint}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains expected keys\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token\");      // Authentication token \r",
							"    pm.expect(jsonData).to.have.property(\"userId\");     // User ID\r",
							"    pm.expect(jsonData).to.have.property(\"username\");   // Username\r",
							"});\r",
							"// 2. Check username matches the input \r",
							"pm.test(\"Username is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"YourUsername\");  // Replace with expected username\r",
							"});\r",
							"\r",
							"// 3. Check response time is less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"existinguser123\",\r\n  \"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{$endpoint}/auth/login",
					"host": [
						"{$endpoint}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Check status code is 201 (Created)\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// 2. Check response contains the expected fields (title, content, id)\r",
							"pm.test(\"Response contains expected keys\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");         // Auto-generated ID\r",
							"    pm.expect(jsonData).to.have.property(\"title\");      // Title of the post\r",
							"    pm.expect(jsonData).to.have.property(\"content\");    // Content of the post\r",
							"});\r",
							"\r",
							"// 3. Check title and content match what was posted\r",
							"pm.test(\"Title and content are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.title).to.eql(\"Your Post Title\"); // Replace expected title\r",
							"    pm.expect(jsonData.content).to.eql(\"Your Post Content\"); // Replace expected content\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Post 1\",\r\n  \"content\": \"This is post 1.\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{$endpoint}/posts",
					"host": [
						"{$endpoint}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Check status code is 204\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"// 2. Check response body is empty\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.equal('');\r",
							"});\r",
							"\r",
							"// 3. Check response time is less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{$endpoint}/posts/{postId}",
					"host": [
						"{$endpoint}"
					],
					"path": [
						"posts",
						"{postId}"
					]
				}
			},
			"response": []
		}
	]
}